#!/usr/bin/env python
# wscript

#/* imports */

import os
import fnmatch
import shutil

#------------------------------------------------------------------------------
#   waf build
#------------------------------------------------------------------------------

def build(bld):

    bld(rule = pre_build)

    compiler_options    = '-fbounds-check -Wunused -fPIC'

    files = ['f90_struct_lib_modProgramConstants.f90',
             'f90_struct_lib_modPerformanceEnhancements.f90', 
             'f90_struct_lib_modLinearAlgebra.f90',
             'f90_struct_lib_modRandomNumbers.f90',
             'f90_struct_lib_main.f90']

    for file_ in files:

        bld.add_group()

        bld(
                features  = 'fc',
    			source    = file_,
         fcflags   = compiler_options
        )

    bld.add_group()

    bld.new_task_gen(
		 	features  = 'fc fcstlib',
	  		source    = files,
	  		target    ='struct',
fcflags   = compiler_options
            
    )

    bld.add_group()

    bld(rule = post_build)


    #/* fortran interface */

    bld.add_group()

    bld(rule = f2py_call)

#    bld.add_group()

#------------------------------------------------------------------------------
#   auxillary functions
#------------------------------------------------------------------------------
def pre_build(self):
    ''' Create the include and lib directory to store the library and compiled
        files if not yet present.

    '''

    absolute_path = os.path.join(self.env.project_paths['MAIN'], self.env.project_paths['STRUCT_TOOLBOX'])
    
    os.chdir(absolute_path + '/tools/computation/f90')

    for dir_ in ['include', 'lib']:
        
        try:
            
            os.makedirs(dir_)
        except OSError:
            
            pass
def post_build(self):
    ''' Copy the resulting library from the build directory to the working 
        directory. 

    '''

    working_ext =  self.env.project_paths['STRUCT_TOOLBOX']

    project_root = self.env.project_paths['MAIN']

    mod_files = fnmatch.filter(os.listdir(project_root + '/.bld/'), 'struct_*')

    target = 'include'

    for i in range(len(mod_files)):

        mod_files[i] =	project_root + '/.bld/' + mod_files[i]

        shutil.copy(mod_files[i], target)

    source = project_root + '/.bld/' + working_ext + '/tools/computation/f90/libstruct.a'

    target = 'lib/'

    shutil.copy(source, target)

def f2py_call(self):
    ''' Create the interface to f90_main using f2py.

    '''

    cmd = 'f2py -c -m  f90_main  f90_main.f90 -Iinclude -Llib -lstruct'
    os.system(cmd)

#------------------------------------------------------------------------------
#   development comments
#------------------------------------------------------------------------------
#
#   I need to make sure the dependencies for the f2py are complete and used in the
#   build process.   
#   
#   Separation of f2py call in a function is required so I can assure sequential
#   execution.
#
#   Should call f2py from inside python.
#

