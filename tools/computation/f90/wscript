#!/usr/bin/env python

# standard library
import fnmatch
import shutil
import os

def build(bld):

    bld(rule = pre_build)

    compiler_options = '-fbounds-check -Wunused -fPIC'

    files = ['f90_struct_lib_modProgramConstants.f90',
             'f90_struct_lib_modPerformanceEnhancements.f90', 
             'f90_struct_lib_modLinearAlgebra.f90',
             'f90_struct_lib_modRandomNumbers.f90',
             'f90_struct_lib_main.f90']

    for file_ in files:

        bld.add_group()

        bld(features  = 'fc',
    		source    = file_,
            fcflags   = compiler_options
        )

    bld.add_group()

    bld.new_task_gen(
		 	features  = 'fc fcstlib',
	  		source    = files,
	  		target    ='struct',
            fcflags   = compiler_options
    )

    bld.add_group()

    bld(rule = post_build)

    bld.add_group()

    bld(rule = f2py_call)

''' Auxiliary functions.
'''
def pre_build(self):
    ''' Create the include and library directory to store the library and 
        compiled files if not yet present.
    '''

    path = self.env.project_paths['STRUCT_TOOLBOX']
    
    os.chdir(path + '/tools/computation/f90')

    for dir_ in ['include', 'lib']:
        
        try:
            
            os.makedirs(dir_)
        
        except OSError:
            
            pass
        
def post_build(self):
    ''' Copy the resulting library from the build directory to the working 
        directory. 

    '''
    
    working_ext = ''

    if(self.env.project_paths['STRUCT_TOOLBOX'] != self.env.project_paths['MAIN']):
        
        working_ext = 'structToolbox'
    
    self.env.project_paths['STRUCT_TOOLBOX']

    project_root = self.env.project_paths['MAIN']

    mod_files = fnmatch.filter(os.listdir(project_root + '/.bld/'), 'struct_*')

    target = 'include'

    for i in range(len(mod_files)):

        mod_files[i] =	project_root + '/.bld/' + mod_files[i]

        shutil.copy(mod_files[i], target)

    source = project_root + '/.bld/' + working_ext + '/tools/computation/f90/libstruct.a'

    target = 'lib/'

    shutil.copy(source, target)

def f2py_call(self):
    ''' Create the interface to f90_main using f2py.
    '''

    os.system('f2py3 -c -m  f90_main  f90_main.f90 -Iinclude -Llib -lstruct')
